/**
 * placeholders
 * ============
 * They're meant to be used with the @extend directive.
 * On their own, without any use of @extend, rulesets that use placeholder selectors will not be rendered to CSS.
 */

// positions

%centered {
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
}

// components

%sr-only {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin-top: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

%list {
  list-style: none;
  margin: 0;
  padding: 0;
  position: relative;
}

%children-margin {
  > * {
    &:first-child {
      margin-top: 0;
    }

    &:last-child {
      margin-bottom: 0;
    }
  }
}

%arrow-prev {
  display: block;
  font-size: 0;
  padding: 20px 0;
  position: relative;
  transition: transform $s;

  &::before {
    background-color: currentColor;
    content: "";
    display: block;
    height: 1px;
    width: 90px;
  }

  &::after {
    border-bottom: 5px solid transparent;
    border-right: 5px solid currentColor;
    border-top: 5px solid transparent;
    content: "";
    display: block;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }

  &:hover {
    transform: translateX(-10px);
  }
}

%arrow-next {
  display: block;
  font-size: 0;
  padding: 20px 0;
  position: relative;
  transition: transform $s;

  &::before {
    background-color: currentColor;
    content: "";
    display: block;
    height: 1px;
    width: 90px;
  }

  &::after {
    border-bottom: 5px solid transparent;
    border-left: 5px solid currentColor;
    border-top: 5px solid transparent;
    content: "";
    display: block;
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
  }

  &:hover {
    transform: translateX(10px);
  }
}

%overlay {
  background: rgba(0, 0, 0, 0.4);
  display: block;
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  transition: opacity $s cubic-bezier(0, 0, 0.3, 1);
  width: 100%;
  will-change: opacity;
}

// buttons

%close-button {
  $close-color: #fff;

  @extend %reset-button;

  display: block;
  height: 40px;
  transform: scale(1);
  transition: transform $s ease;
  width: 40px;

  &::before,
  &::after {
    background-color: $close-color;
    content: "";
    height: 2px;
    left: 50%;
    position: absolute;
    top: 50%;
    transform: scale(1);
    transition: transform 0.3s ease;
    width: 40px;
    z-index: 1;
  }

  &::before {
    transform: translate(-50%, -50%) rotate(45deg);
  }

  &::after {
    transform: translate(-50%, -50%) rotate(-45deg);
  }

  &:hover,
  &:focus {
    transform: scale(1.1);
  }
}

%play-button {
  $play-color: #fff;

  @extend %reset-button;

  &::before,
  &::after {
    @extend %centered;

    content: "";
    pointer-events: none;
    transition: opacity $s, transform $s;
  }

  &::before {
    border: solid 0.25rem $play-color;
    border-radius: 50%;
    height: 4rem;
    width: 4rem;
  }

  &::after {
    border-bottom: 1rem solid transparent;
    border-left: 1.5rem solid $play-color;
    border-top: 1rem solid transparent;
    height: 0;
    margin: 0 0 0 0.2rem;
  }
}

%reset-button {
  appearance: none;
  background-color: transparent;
  border: 0;
  border-radius: 0;
  color: inherit;
  cursor: pointer;
  font: inherit;
  line-height: normal;
  outline: none;
  overflow: visible;
  padding: 0;
  user-select: none;
}
